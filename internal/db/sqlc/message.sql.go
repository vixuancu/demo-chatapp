// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: message.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const countRoomMessages = `-- name: CountRoomMessages :one
SELECT COUNT(*) FROM messages WHERE room_id = $1
`

func (q *Queries) CountRoomMessages(ctx context.Context, roomID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countRoomMessages, roomID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO
    messages (room_id, user_uuid, content)
VALUES ($1, $2, $3) RETURNING message_id, room_id, user_uuid, content, message_created_at
`

type CreateMessageParams struct {
	RoomID   int64     `json:"room_id"`
	UserUuid uuid.UUID `json:"user_uuid"`
	Content  string    `json:"content"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.RoomID, arg.UserUuid, arg.Content)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.RoomID,
		&i.UserUuid,
		&i.Content,
		&i.MessageCreatedAt,
	)
	return i, err
}

const getRoomMessages = `-- name: GetRoomMessages :many
SELECT message_id, room_id, user_uuid, content, message_created_at
FROM messages
WHERE
    room_id = $1
ORDER BY message_created_at DESC
LIMIT $2
OFFSET
    $3
`

type GetRoomMessagesParams struct {
	RoomID int64 `json:"room_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetRoomMessages(ctx context.Context, arg GetRoomMessagesParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getRoomMessages, arg.RoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.MessageID,
			&i.RoomID,
			&i.UserUuid,
			&i.Content,
			&i.MessageCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
